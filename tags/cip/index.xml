<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cip on Diwise for Developers</title><link>https://diwise.github.io/tags/cip/index.html</link><description>Recent content in cip on Diwise for Developers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://diwise.github.io/tags/cip/index.xml" rel="self" type="application/rss+xml"/><item><title>City Information Platform</title><link>https://diwise.github.io/architecture/cip/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/architecture/cip/index.html</guid><description>Container Diagram C4Container System_Ext(dataportal, &amp;#34;dataportal.se&amp;#34;, &amp;#34;Harvests meta data about open API:s&amp;#34;) System_Ext(iot-p, &amp;#34;IoT Platform&amp;#34;, &amp;#34;Stores and provides current and&amp;lt;br&amp;gt;historical city information&amp;#34;) System_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;Open ID Connect compliant&amp;lt;br&amp;gt;identity and access management&amp;#34;) System(opendata, &amp;#34;Open Data&amp;#34;, &amp;#34;Provides open data via REST API:s&amp;#34;) System(batch, &amp;#34;Batch Job&amp;#34;, &amp;#34;Extracts data periodically&amp;#34;) System(integrations, &amp;#34;Integrations&amp;#34;, &amp;#34;Fetches data from external services and&amp;lt;br&amp;gt;integrates it into the CIP&amp;#34;) Container_Boundary(c1, &amp;#34;City Information Platform&amp;#34;) { Container_Ext(orion-ld, &amp;#34;Orion-LD&amp;#34;, $techn=&amp;#34;C&amp;#43;&amp;#43;&amp;#34;, &amp;#34;Orion-LD is a Context Broker and CEF&amp;lt;br&amp;gt;building block for context data management&amp;lt;br&amp;gt;which supports both the&amp;lt;br&amp;gt;NGSI-LD and the NGSI-v2 APIs.</description></item><item><title>Context Broker</title><link>https://diwise.github.io/services/context-broker/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/context-broker/index.html</guid><description>Description This service is a distribution broker that federates information from multiple underlying NGSI-LD Context Brokers and across domains. It is responsible for implementing selected parts of the NGSI-LD API and limit the exposure of underlying services.
Architecture Diagrams C4Container System_Ext(producer, &amp;#34;Context Producer&amp;#34;, &amp;#34;An agent that uses the NGSI-LD context provision&amp;lt;br&amp;gt;and/or registration functionality to provide or announce the&amp;lt;br&amp;gt;availability of its context information to an NGSI-LD Context Broker&amp;#34;) System_Ext(consumer, &amp;#34;Context Consumer&amp;#34;, &amp;#34;An agent that uses the query and&amp;lt;br&amp;gt;subscription functionality of NGSI-LD to&amp;lt;br&amp;gt;retrieve context information&amp;#34;) System_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;Open ID Connect compliant&amp;lt;br&amp;gt;identity and access management&amp;#34;) Container_Boundary(c1, &amp;#34;Context Broker&amp;#34;) { Container(context-broker, &amp;#34;context-broker&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;You are here&amp;#34;) Container_Ext(notifier, &amp;#34;notifier&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;A service that handles notifications&amp;#34;) } Container_Boundary(c2, &amp;#34;Federated Brokers&amp;#34;) { Container_Ext(brokerA, &amp;#34;Context Broker A&amp;#34;, &amp;#34;An architectural component that implements all the NGSI-LD interfaces&amp;#34;) Container_Ext(brokerB, &amp;#34;Context Broker B&amp;#34;, &amp;#34;An architectural component that implements all the NGSI-LD interfaces&amp;#34;) } Rel(producer, context-broker, &amp;#34;creates, updates or deletes&amp;lt;br&amp;gt;entities in&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) Rel(consumer, context-broker, &amp;#34;fetches entities&amp;lt;br&amp;gt;from&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) Rel(context-broker, notifier, &amp;#34;sends notifi-&amp;lt;br&amp;gt;cations via&amp;#34;, &amp;#34;https&amp;#34;) UpdateRelStyle(producer, context-broker, $offsetX=&amp;#34;30&amp;#34;, $offsetY=&amp;#34;-150&amp;#34;) UpdateRelStyle(consumer, context-broker, $offsetX=&amp;#34;50&amp;#34;, $offsetY=&amp;#34;-150&amp;#34;) UpdateRelStyle(context-broker, notifier, $offsetX=&amp;#34;-30&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) Rel(context-broker, keycloak, &amp;#34;validates auth tokens&amp;#34;, &amp;#34;OIDC&amp;#34;) UpdateRelStyle(context-broker, keycloak, $offsetX=&amp;#34;-130&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) Rel(context-broker, brokerA, &amp;#34;creates, retrieves, updates or&amp;lt;br&amp;gt;deletes entities in&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) Rel(context-broker, brokerB, &amp;#34;creates, retrieves, updates or&amp;lt;br&amp;gt;deletes entities in&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) UpdateRelStyle(context-broker, brokerA, $offsetX=&amp;#34;-180&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;) UpdateRelStyle(context-broker, brokerB, $offsetX=&amp;#34;-20&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;) Rel(notifier, consumer, &amp;#34;notifies registered consumers&amp;lt;br&amp;gt;about entity changes&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) UpdateLayoutConfig($c4ShapeInRow=&amp;#34;2&amp;#34;, $c4BoundaryInRow=&amp;#34;1&amp;#34;) TODO: Add a diagram that explains the inner workings of the context broker.</description></item></channel></rss>