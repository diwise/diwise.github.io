<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iot on Diwise for Developers</title><link>https://diwise.github.io/tags/iot/index.html</link><description>Recent content in iot on Diwise for Developers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://diwise.github.io/tags/iot/index.xml" rel="self" type="application/rss+xml"/><item><title>IoT Platform</title><link>https://diwise.github.io/architecture/iot/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/architecture/iot/index.html</guid><description>Container Diagram C4Container Person(admin, &amp;#34;Administrator&amp;#34;) System_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;Open ID Connect compliant identity and access management&amp;#34;) SystemQueue_Ext(mqtt, &amp;#34;MQTT&amp;#34;, &amp;#34;Message bus to interact with underlying IoT platform&amp;#34;) Container(dev-mgmt-web, &amp;#34;Device Management UI&amp;#34;, $techn=&amp;#34;JavaScript, React&amp;#34;, &amp;#34;Presents devicemanagement capabilities to users.&amp;#34;) System_Ext(cip-p, &amp;#34;City Information Platform&amp;#34;, &amp;#34;Stores and provides current and&amp;lt;br&amp;gt;historical city information&amp;#34;) Container_Boundary(c1, &amp;#34;IoT Platform&amp;#34;) { Container(iot-dev-mgmt, &amp;#34;iot-device-mgmt&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;Backend service for device management&amp;#34;) Container(iot-agent, &amp;#34;iot-agent&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;Decodes and translates incoming messages&amp;#34;) Container(iot-tr-fw, &amp;#34;iot-transform-fiware&amp;#34;, $tech=&amp;#34;Go&amp;#34;, &amp;#34;Transforms accepted messages into&amp;lt;br&amp;gt;corresponding datamodels known&amp;lt;br&amp;gt;to the City Information Platform&amp;#34;) ContainerDb_Ext(pgsql, &amp;#34;PostgreSQL Database&amp;#34;, &amp;#34;SQL Database&amp;#34;, &amp;#34;To be used for storing information&amp;lt;br&amp;gt;about device types and tenants.</description></item><item><title>IoT Agent</title><link>https://diwise.github.io/services/iot-agent/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/iot-agent/index.html</guid><description>Description The iot-agent service is responsible for connecting to an underlying platform via MQTT and ingest messages from the topics it subscribes to.
Architecture Diagrams C4Component Container_Boundary(b1, &amp;#34;iot-agent&amp;#34;) { Container_Boundary(apib, &amp;#34;API&amp;#34;) { Component(api, &amp;#34;API&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;handles incoming messages&amp;#34;) } Container_Boundary(msgp, &amp;#34;Message Processor&amp;#34;) { Component(decoderreg, &amp;#34;Decoder Registry&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;contains all available decoders&amp;#34;) Component(decoder, &amp;#34;Decoder&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;decodes incoming sensor specific&amp;lt;br&amp;gt;payloads to internal format&amp;#34;) Component(converterreg, &amp;#34;Converter Registry&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;contains all available converters&amp;#34;) Component(converter, &amp;#34;Converter&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;converts internal format&amp;lt;br&amp;gt;to LWM2M SenML&amp;#34;) } Container_Boundary(evts, &amp;#34;Event Sender&amp;#34;) { Component(sender, &amp;#34;Sender&amp;#34;) } Component(mqtt-client, &amp;#34;MQTT Client&amp;#34;) } UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;3&amp;#34;) Endpoints Application This service exposes the following application endpoints:</description></item><item><title>IoT Core</title><link>https://diwise.github.io/services/iot-core/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/iot-core/index.html</guid><description>Description The iot-core service is responsible for enriching and accepting incoming messages for further processing.
Architecture Diagrams C4Component Container_Boundary(b1, &amp;#34;iot-core&amp;#34;) { Container_Boundary(infra, &amp;#34;infrastructure&amp;#34;) { Component(listener, &amp;#34;Queue Listener&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;listens for commands posted to&amp;lt;br&amp;gt;the iot-core queue&amp;#34;) } Container_Boundary(app, &amp;#34;application&amp;#34;) { Component(processor, &amp;#34;Message Processor&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;processes received messages, enriches&amp;lt;br&amp;gt;and accepts them for further processing&amp;#34;) } } Container_Boundary(b3, &amp;#34;iot-device-mgmt&amp;#34;) { Container_Ext(devmgmt, &amp;#34;Device Management&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;manages information about&amp;lt;br&amp;gt;connected devices&amp;#34;) } Container_Boundary(b2, &amp;#34;messaging&amp;#34;) { Container_Ext(rabbitmq, &amp;#34;Rabbit MQ&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;distributes internal messages within&amp;lt;br&amp;gt;the IoT platform&amp;#34;) } Rel(processor, devmgmt, &amp;#34;fetches device information from&amp;#34;) UpdateRelStyle(processor, devmgmt, $offsetX=&amp;#34;60&amp;#34;, $offsetY=&amp;#34;30&amp;#34;) Rel(rabbitmq, listener, &amp;#34;delivers message.</description></item><item><title>IoT Device Dashboard</title><link>https://diwise.github.io/services/iot-device-mgmt-web/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/iot-device-mgmt-web/index.html</guid><description>Description The iot-device-mgmt-web service is responsible for providing a status view of the registered devices.
Architecture Diagrams C4Component Container_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;) Person_Ext(user, &amp;#34;Administrator&amp;#34;) Container_Boundary(b1, &amp;#34;iot-device-mgmt-web&amp;#34;) { Component(app, &amp;#34;React App&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;displays information about registered devices&amp;#34;) } Container_Boundary(b3, &amp;#34;iot-device-mgmt&amp;#34;) { Container_Ext(devmgmt, &amp;#34;Device Management&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;manages information about&amp;lt;br&amp;gt;connected devices&amp;#34;) } Rel(app, keycloak, &amp;#34;fetches access&amp;lt;br&amp;gt;token from&amp;#34;) UpdateRelStyle(app, keycloak, $offsetX=&amp;#34;-120&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) Rel(user, keycloak, &amp;#34;logs in via&amp;#34;) UpdateRelStyle(user, keycloak, $offsetX=&amp;#34;-20&amp;#34;, $offsetY=&amp;#34;-30&amp;#34;) Rel(user, app, &amp;#34;uses&amp;#34;) UpdateRelStyle(user, app, $offsetX=&amp;#34;75&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) BiRel(app, devmgmt, &amp;#34;fetches device status from &amp;lt;br&amp;gt;https and server push&amp;#34;) UpdateRelStyle(app, devmgmt, $offsetX=&amp;#34;30&amp;#34;, $offsetY=&amp;#34;-30&amp;#34;) UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;1&amp;#34;) Endpoints Application This service is a frontend client, and does not expose any application endpoints of its own.</description></item><item><title>IoT Device Management</title><link>https://diwise.github.io/services/iot-device-mgmt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/iot-device-mgmt/index.html</guid><description>Description The iot-device-mgmt service is responsible for managing all the registered devices.
Architecture Diagrams C4Component Container_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;&amp;#34;) Container_Ext(devmgmt-web, &amp;#34;Device Management UI&amp;#34;, &amp;#34;&amp;#34;) Container_Ext(eventsubs, &amp;#34;Third Party Event Subscribers&amp;#34;, &amp;#34;&amp;#34;) Container_Boundary(b1, &amp;#34;iot-device-mgmt&amp;#34;) { Container_Boundary(api, &amp;#34;API&amp;#34;) { Component(api, &amp;#34;API&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;handles incoming&amp;lt;br&amp;gt;requests&amp;#34;) } Container_Boundary(events, &amp;#34;Events&amp;#34;) { Component(cloudevt, &amp;#34;Cloud Event Generator&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;generates cloud events to&amp;lt;br&amp;gt;registered subscribers&amp;#34;) Component(db, &amp;#34;In Memory Database&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;contains all registered&amp;lt;br&amp;gt;devices&amp;#34;) } Container_Boundary(monitor, &amp;#34;Monitoring&amp;#34;) { Component(watchdog, &amp;#34;Watchdog&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;monitors liveliness of&amp;lt;br&amp;gt;registered devices&amp;#34;) } } UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;3&amp;#34;) Emitted Events TODO: Document what events are emitted from this service via SSE or as cloud events.</description></item><item><title>IoT Transform Fiware</title><link>https://diwise.github.io/services/iot-transform-fiware/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/services/iot-transform-fiware/index.html</guid><description>Description The iot-transform-fiware service is responsible for transforming incoming sensor data to corresponding fiware entities, if any.
Architecture Diagrams C4Component Component_Ext(rabbitmq, &amp;#34;RabbitMQ&amp;#34;, &amp;#34;&amp;#34;, &amp;#34; &amp;#34;) Component_Ext(broker, &amp;#34;Context Broker&amp;#34;, &amp;#34;&amp;#34;, &amp;#34; &amp;#34;) Container_Boundary(b1, &amp;#34;iot-transform-fiware&amp;#34;) { Container_Boundary(msgp, &amp;#34;Application&amp;#34;) { Component(mp, &amp;#34;Message Processor&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;processes incoming&amp;lt;br&amp;gt;messages&amp;#34;) Component(transreg, &amp;#34;Registry&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;contains all available&amp;lt;br&amp;gt;transformers&amp;#34;) Component(transformer, &amp;#34;Transformer&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;transforms a given payload&amp;lt;br&amp;gt;to a specific entity type&amp;#34;) } Container_Boundary(bc, &amp;#34;Context Broker Client&amp;#34;) { Component(client, &amp;#34;Client&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;abstracts the broker&amp;#39;s&amp;lt;br&amp;gt;NGSI-LD API&amp;#34;) } } Rel(rabbitmq, mp, &amp;#34;delivers messages to&amp;#34;, &amp;#34;topic: message.</description></item></channel></rss>