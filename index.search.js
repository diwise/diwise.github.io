var relearn_search_index=[{content:`An introduction to development, installation and deployment.
`,description:"",tags:null,title:"Introduction",uri:"/intro/index.html"},{content:'System Context Diagram C4Context Boundary(boutputs, "egresses", "Integrations") { System_Ext(subs, "Subscribers") } Boundary(b0, "diwise", "Software System") { System(iot-p, "IoT Platform", "Manages devices and aggregates\u003cbr\u003einformation from different platforms.") System(cip-p, "City Information Platform", "Stores and provides current and\u003cbr\u003ehistorical city information.") } Boundary(binputs, "ingresses", "Integrations") { SystemQueue_Ext(mqtt, "MQTT") System(integration, "Integration", "Fetches data from external services\u003cbr\u003eand stores them in CiP") } Boundary(bonline, "Third Party Services", "") { System_Ext(ext-iot-p, "External IoT Platform") System_Ext(exts, "External Services") } Rel(iot-p, mqtt, "pub/sub", "amqp") Rel(cip-p, subs, "Notifies", "https, NGSI-LD Notification") Rel(iot-p, cip-p, "Updates", "https, NGSI-LD") Rel(iot-p, subs, "Notifies", "https, Cloud Event") Rel(ext-iot-p, mqtt, "pub/sub", "amqp") Rel(integration, exts, "Fetches telemetry and data") Rel(integration, cip-p, "Updates", "NGSI-LD") UpdateRelStyle(iot-p, mqtt, $offsetX="-60", $offsetY="-40") UpdateRelStyle(cip-p, subs, $offsetX="30", $offsetY="-50") UpdateRelStyle(iot-p, cip-p, $offsetX="-40", $offsetY="30") UpdateRelStyle(iot-p, subs, $offsetX="-120", $offsetY="-50") UpdateRelStyle(integration, cip-p, $offsetX="25", $offsetY="-40") UpdateRelStyle(integration, exts, $offsetX="50", $offsetY="5") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") ',description:"Describes the two main logical components of diwise.",tags:["arch"],title:"Overview",uri:"/architecture/overview/index.html"},{content:`Prerequisites git docker visual studio code or an IDE of your own choosing. Provided that you have all the prerequisites installed on your computer, the first step to getting started with diwise is to check out the main repository from github.com. Copy and paste the line below into your terminal, then press enter:
git clone git@github.com:diwise/diwise.git You can now open the project in your IDE and familiarise yourself with it.
Preparations The docker compose environment assumes that you have modified your hosts file to add local DNS entries for diwise.local and iam.diwise.local.
MacOS Windows Linux Edit your /private/etc/hosts file to include the two lines:
127.0.0.1 diwise.local 127.0.0.1 iam.diwise.local Then invoke the following command to allow the mappings to take effect:
sudo killall -HUP mDNSResponder Edit your C:\\Windows\\System32\\drivers\\etc\\hosts file to include the two lines:
127.0.0.1 diwise.local 127.0.0.1 iam.diwise.local Edit your /etc/hosts file to include the two lines:
127.0.0.1 diwise.local 127.0.0.1 iam.diwise.local Running and testing You can use the commands below to start, test and take down the composed environment. The commands assume you are standing at the root of the project directory.
Run the compose environment docker compose -f deployments/docker/docker-compose.yaml up Sending data packets While the compose environment is up and running, data packets can be ingested using curl or another tool of your choice by posting data to https://diwise.local:8443/api/v0/messages.
Clean up environment after testing docker compose -f deployments/docker/docker-compose.yaml down -v --remove-orphans Observability To run diwise with log, metric and trace aggregation enabled using tools like fluent-bit, loki, otel-collector and tempo. These are set up in a separate docker compose for performance reasons and must be explicitly included when starting the environment.
docker compose -f deployments/docker/docker-compose.yaml -f deployments/docker/docker-compose.o11y.yaml up Once started the data collected by these tools will be accessible via https://diwise.local:8443/grafana/
Additional configuration Configure MQTT On docker compose up, the services will start with MQTT disabled. The recommended way to add configuration parameters is to create a docker-compose.override.yaml file containing user or project specific settings/secrets that should not be pushed to the repo. For extra protection, this file name is added to the .gitignore file to reduce the likelihood that settings are pushed to GitHub.
An example configuration looks like this:
version: '3' services: iot-agent: environment: MQTT_DISABLED: 'false' MQTT_HOST: 'your.mqtt.server' MQTT_USER: '\u003cmqtt-user\u003e' MQTT_PASSWORD: '\u003cmqtt-password\u003e' MQTT_TOPIC_0: '\u003cmqtt-topic\u003e' And is merged with the default configuration by adding a -f argument to compose like so:
docker compose -f deployments/docker/docker-compose.yaml -f deployments/docker/docker-compose.override.yaml up `,description:"How to set up the development environment",tags:["usage","docs"],title:"Set up development environment",uri:"/getting-started/how-to/dev-environment/index.html"},{content:` Sensor type ID Description qalcosonic Qalcosonic W1 (w1e, w1h, w1t), ultrasonic meter for cold and hot water presence Same as strips_lora_ms_h elsys_codec Use with Elsys ERS sensors enviot tem_lab_14ns SenlabT strips_lora_ms_h Sensative Strips cube02 Sensfarm soil moisture sensor milesight_am100 Milesight AM series sensors qalcosonic Volume (incl. timestamp) Temperature (w1t) - Status (codes \u0026 messages) elsys_codec Temperature ExternalTemperature Vdd CO2 Humidity Light Motion Occupancy DigitalInput DigitalInputCounter Depends on the Generic Javascript decoder being installed in the LoRaWAN application server
enviot Battery Humidity SensorStatus SnowHeight Temperature Depends on external javascript decoder being installed in LoRaWAN application server
milesight_am100 Temperature Humidity CO2 Battery Depends on external decoder being installed in the LoRaWAN application server
tem_lab_14ns Temperature presence / strips_lora_ms_h BatteryLevel Temperature Humidity DoorReport DoorAlarm Presence cube02 BatteryVoltage Resistances SoilMoistures Temperature `,description:"",tags:["intro","configuration","sensors"],title:"Supported sensor types",uri:"/intro/supported-sensor-types/index.html"},{content:`Contents OverviewDescribes the two main logical components of diwise.
City Information PlatformHow we integrate different smart city components into a greater whole.
IoT PlatformAggregates data from different platforms.
`,description:"",tags:["arch"],title:"Architecture",uri:"/architecture/index.html"},{content:'Container Diagram C4Container System_Ext(dataportal, "dataportal.se", "Harvests meta data about open API:s") System_Ext(iot-p, "IoT Platform", "Stores and provides current and\u003cbr\u003ehistorical city information") System_Ext(keycloak, "Keycloak", "Open ID Connect compliant\u003cbr\u003eidentity and access management") System(opendata, "Open Data", "Provides open data via REST API:s") System(batch, "Batch Job", "Extracts data periodically") System(integrations, "Integrations", "Fetches data from external services and\u003cbr\u003eintegrates it into the CIP") Container_Boundary(c1, "City Information Platform") { Container_Ext(orion-ld, "Orion-LD", $techn="C++", "Orion-LD is a Context Broker and CEF\u003cbr\u003ebuilding block for context data management\u003cbr\u003ewhich supports both the\u003cbr\u003eNGSI-LD and the NGSI-v2 APIs.") Container(context-broker, "context-broker", $techn="Go", "Federating context broker") Container_Ext(mintaka, "Mintaka", $techn="Java/Micronaut", "Mintaka is an implementation of the\u003cbr\u003eNGSI-LD temporal retrieval api.\u003cbr\u003eIt relies on the Orion-LD Context Broker\u003cbr\u003eto provide the underlying database.") ContainerDb_Ext(mongo, "MongoDB Database", "Document Database", "") ContainerDb_Ext(timescale, "Timescale Database", "Time series database", "") } Rel(dataportal, opendata, "harvests metadata from", "https, DCAT-AP-SE") UpdateRelStyle(dataportal, opendata, $offsetX="-150", $offsetY="-10") Rel(batch, context-broker, "retrieves entities from", "https, NGSI-LD, OAuth2") UpdateRelStyle(batch, context-broker, $offsetX="-170", $offsetY="-80") Rel(opendata, context-broker, "retrieves entities from", "https, NGSI-LD") UpdateRelStyle(opendata, context-broker, $offsetX="-260", $offsetY="-80") Rel(iot-p, context-broker, "creates or updates entities in", "NGSI-LD, OAuth2") UpdateRelStyle(iot-p, context-broker, $offsetX="-200", $offsetY="-170") Rel(integrations, context-broker, "creates or updates entities in", "NGSI-LD") UpdateRelStyle(integrations, context-broker, $offsetX="90", $offsetY="-80") Rel(context-broker, orion-ld, "delegates non\u003cbr\u003etemporal reqs to", "NGSI-LD") Rel(context-broker, mintaka, "delegate temporal\u003cbr\u003eAPI requests to", "NGSI-LD") Rel(context-broker, keycloak, "validates JWT token via", "OIDC") UpdateRelStyle(context-broker, orion-ld, $offsetX="-45", $offsetY="-40") UpdateRelStyle(context-broker, mintaka, $offsetX="-47", $offsetY="-40") UpdateRelStyle(context-broker, keycloak, $offsetX="-75", $offsetY="-170") Rel(orion-ld, mongo, "CRUD", "mongo") Rel(orion-ld, timescale, "store details about temporal\u003cbr\u003eevolution of entities in", "pgsql") UpdateRelStyle(orion-ld, mongo, $offsetX="-60", $offsetY="-10") Rel(mintaka, timescale, "reads temporal data from", "pgsql") UpdateRelStyle(mintaka, timescale, $offsetX="60", $offsetY="0") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") ',description:"How we integrate different smart city components into a greater whole.",tags:["arch","cip"],title:"City Information Platform",uri:"/architecture/cip/index.html"},{content:`Measurements are what comes out of a sensor reading. Since sensors don’t normally share a common language, diwise will normalize sensor values to OMA LightweightM2M (LwM2M) objects.
Measurement Description AirQuality urn:oma:lwm2m:ext:3428 Conductivity urn:oma:lwm2m:ext:3327 DigitalInput urn:oma:lwm2m:ext:3200 Humidity urn:oma:lwm2m:ext:3304 Illuminance urn:oma:lwm2m:ext:3301 PeopleCount urn:oma:lwm2m:ext:3434 Presence urn:oma:lwm2m:ext:3302 Pressure urn:oma:lwm2m:ext:3323 Temperature urn:oma:lwm2m:ext:3303 Watermeter urn:oma:lwm2m:ext:3424 `,description:"",tags:["intro","configuration"],title:"Measurements",uri:"/intro/measurements/index.html"},{content:` MVP Warning! This is a feature implementation is an MVP and will be changed in an upcoming PR.
Environment Description It’s possible to omit this value air If a sensor is placed within air indoors Indoor sensor lifebuoy Special case, if a presence sensor is used to detect presence of a lifebuoy soil for sensors placed in soil water sensors placed in water Configure Available environments are configured in a iot-device-mgmt configuration file. To connect a sensor to an environment, add a supported value in the where column of the device.csv file as described here
Usages The environment value is added to the output from iot-core and could be used be other services.
One service that uses the environment value is iot-transform-fiware. The measurement type in combination with environment is used to decide which Smart Data Model to create or update.
`,description:"",tags:["intro","configuration"],title:"Environments",uri:"/intro/environments/index.html"},{content:'Container Diagram C4Container Person(admin, "Administrator") System_Ext(keycloak, "Keycloak", "Open ID Connect compliant identity and access management") SystemQueue_Ext(mqtt, "MQTT", "Message bus to interact with underlying IoT platform") Container(dev-mgmt-web, "Device Management UI", $techn="JavaScript, React", "Presents devicemanagement capabilities to users.") System_Ext(cip-p, "City Information Platform", "Stores and provides current and\u003cbr\u003ehistorical city information") Container_Boundary(c1, "IoT Platform") { Container(iot-dev-mgmt, "iot-device-mgmt", $techn="Go", "Backend service for device management") Container(iot-agent, "iot-agent", $techn="Go", "Decodes and translates incoming messages") Container(iot-tr-fw, "iot-transform-fiware", $tech="Go", "Transforms accepted messages into\u003cbr\u003ecorresponding datamodels known\u003cbr\u003eto the City Information Platform") ContainerDb_Ext(pgsql, "PostgreSQL Database", "SQL Database", "To be used for storing information\u003cbr\u003eabout device types and tenants.") Container(iot-core, "iot-core", $tech="Go", "Decorates received messages and accepts\u003cbr\u003ethem for further processing") SystemQueue_Ext(rmq, "RabbitMQ", "Message bus used for internal\u003cbr\u003epublish/subscribe between services.") } Rel(admin, dev-mgmt-web, "Uses", "https") Rel(admin, keycloak, "Login", "OAuth2, Code+PKCE") UpdateRelStyle(admin, dev-mgmt-web, $offsetX="-50", $offsetY="-10") UpdateRelStyle(admin, keycloak, $offsetX="-40", $offsetY="20") Rel(dev-mgmt-web, keycloak, "Get JWT access token", "OAuth2") Rel(dev-mgmt-web, iot-dev-mgmt, "Manage devices", "https, REST") UpdateRelStyle(dev-mgmt-web, keycloak, $offsetX="30", $offsetY="-20") UpdateRelStyle(dev-mgmt-web, iot-dev-mgmt, $offsetX="-110", $offsetY="-50") Rel(iot-agent, mqtt, "subscribe to incoming\u003cbr\u003emessage payloads", "amqp") Rel(iot-agent, iot-dev-mgmt, "validate and\u003cbr\u003eidentify device", "https, OAuth2") Rel(iot-agent, iot-core, "event:\u003cbr\u003emessage.received", "queue: iot-core") UpdateRelStyle(iot-agent, mqtt, $offsetX="50", $offsetY="-50") UpdateRelStyle(iot-agent, iot-dev-mgmt, $offsetX="-40", $offsetY="-50") UpdateRelStyle(iot-agent, iot-core, $offsetX="10", $offsetY="-10") Rel(iot-core, iot-dev-mgmt, "fetch enrichment\u003cbr\u003edetails from", "https, OAuth2") Rel(iot-core, iot-tr-fw, "publish", "topic: message.accepted") UpdateRelStyle(iot-core, iot-dev-mgmt, $offsetX="-90", $offsetY="10") Rel(iot-tr-fw, cip-p, "Updates", "https, NGSI-LD") UpdateRelStyle(iot-tr-fw, cip-p, $offsetX="50", $offsetY="-30") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") ',description:"Aggregates data from different platforms.",tags:["arch","iot"],title:"IoT Platform",uri:"/architecture/iot/index.html"},{content:` “A production ready microservice is documented and understood. Documentation and organizational understanding increase developer velocity while mitigating two of the most significant trade-offs that come with the adoption of microservice architecture; organizational sprawl and technical debt.” — Susan J Fowler, Production Ready Microservices
This section contains documentation regarding deployment and use of our included services.
Context Broker IoT Agent IoT Core IoT Device Dashboard IoT Device Management IoT Transform Fiware `,description:"",tags:null,title:"Microservices",uri:"/services/index.html"},{content:`Below is a list of the available how to’s on how to work with diwise. From setting up your development environment to guides on how to add a device, create your own decoders, or contribute to diwise.
How to Set up development environment Add a device Contribute `,description:"",tags:null,title:"Getting Started",uri:"/getting-started/index.html"},{content:`Introduction The recommended way to customize and install diwise in your own environment is to create an installation manifest using kustomize, that can then be applied to your kubernetes cluster using a tool such as kubectl or oc.
In this chapter we will be walking through a basic setup, from creating the first skeleton manifest, to configuring secrets, to deployment into a test cluster. Lets go!
Requirements First, we need to make sure that we have gone over the prerequisites for installation. Diwise is a containerized platform, that is primarily meant to be deployed to some form of kubernetes.
Kubernetes Environment In this walk through we will be setting up a local kubernets cluster that can be used to verify our installation. Adapting the instructions to real test or production clusters is left as an exercise to the reader, due to the massive amount of different possible configurations out there.
TODO: Document how to set up a local test cluster in different environments
Tools Download and install the kustomize command line tool from https://kubectl.docs.kubernetes.io/installation/kustomize/
Creating our first manifest Start by creating a new folder containing a file named kustomization.yaml. We recommend that you keep your configuration in a version control system, such as git, to improve the traceability and auditability of your configuration.
Edit kustomization.yaml to look like this:
apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization # Change this to something more appropriate namespace: my-own-diwise resources: - ssh://github.com/diwise/diwise/deployments/k8s?depth=1 This bare minimum file instructs kustomize to pull the latest released diwise manifest from github, and overlay each resource with the namespace you intend to deploy diwise into.
Create your first, noy yet fully functional, installation manifest with the following command:
kustomize build . \u003e installation-manifest.yaml If this command succeeds and creates a non empty manifest file, we are all set to continue setting up the rest of the platform. But that is an exercise for another episode. Come back soon!
`,description:"",tags:null,title:"Deployment",uri:"/deployment/index.html"},{content:` Heads up! The device/sensor that should be added need to be of a known type, that is, a decoder for the type of sensor must already exist and the device/sensor should be provisioned within the LoRa application server.
How to add a new sensor Add device metadata Device metadata is stored in iot-device-mgmt. When iot-device-mgmt starts up it load data from csv-files and adds information to its database.
The file 30.devices.csv contains data about sensors.
devEUI;internalID;lat;lon;where;types;decoder;name;description;active;tenant;interval a1b2bc3d4e5f6;intern-a1b2bc3d4e5f6;0;0;air;urn:oma:lwm2m:ext:3303;tem_lab_14ns;;;true;default;0 Column Description devEUI Physical ID of sensor internalID DeviceID used in diwise lat Latitude lon Longitude where Environments types type of measurements decoder name of the decoder to use, supported sensor types name Display name to be used i dashboard description Description to be used in dashboard active true or false, only active sensors will pubslish output tenant name of tenant interval 0 Compose override Ensure that your Development environment is set up accordantly.
Then create an docker compose override file with your custom settings and modified 30.devices.csv with your added sensor.
version: '3' services: iot-agent: environment: MQTT_DISABLED: 'false' MQTT_HOST: 'your.mqtt.host' MQTT_PORT: '1883' MQTT_USER: '\u003cmqtt-user\u003e' MQTT_PASSWORD: '\u003cmqtt-password\u003e' MQTT_TOPIC_0: '\u003cmqtt-topic\u003e' iot-device-mgmt: image: 'diwise/iot-device-mgmt:latest' volumes: - ./path/to/custom/data:/opt/diwise/config/data Compose up the environment with the following command
docker compose -f deployments/docker/docker-compose.yaml -f /path/to/docker-compose.override.yaml up If everything is set up correct diwise should start and begin to listen to incoming payloads.
Background %%{init:{"theme":"neutral", "sequence":{"showSequenceNumbers":true}}}%% sequenceDiagram LoRa-\u003e\u003eiot-agent: uplink message loop iot-agent-\u003e\u003eiot-agent: POST to /api/v0/messages end iot-agent--\u003e\u003eiot-device-mgmt: device metadata lookup iot-device-mgmt--\u003e\u003eiot-agent: deviceID, sensor type iot-agent-\u003e\u003eiot-core: measurements iot-core--\u003e\u003eiot-device-mgmt: device metadata lookup iot-device-mgmt--\u003e\u003eiot-core: environment, position, more iot-core-\u003e\u003eiot-transform-fiware: PUBLISH output Uplink message This is a example payload that comes from a tem_lab_14ns sensor.
{ "devEui": "a1b2bc3d4e5f6", "sensorType": "tem_lab_14ns", "payload": "01FE90619c10006A" } From this payload iot-agent will use devEUI to lookup metadata about the sensor (3). SensorType that is in the payload is not used for anything within diwise.
Device metadata (iot-device-mgmt) The response (4) from iot-device-mgmt contains information about the device.
{ "devEUI": "a1b2bc3d4e5f6", "deviceID": "intern-a1b2bc3d4e5f6", "name": "name", "description": "description", "location": { "latitude": 0, "longitude": 0, "altitude": 0 }, "environment": "air", "types": [ "urn:oma:lwm2m:ext:3303" ], "sensorType": { "id": 1, "name": "tem_lab_14ns", "description": "", "interval": 3600 }, "lastObserved": "2023-02-01T13:37:00Z", "active": true, "tenant": "default", "status": { "batteryLevel": 0, "statusCode": 0, "timestamp": "" }, "interval": 60 } For now we’re interested the following attributes:
Attribute Description deviceID The internal ID that will be used by diwise sensorType the type of sensor, see Supported sensor types. Used to select a decoder to decode the sensor payload active only active sensors will send measurements. types type of measurement that the sensor will provide, see type of measurements environment additional information about the sensor, see environments Output The decoded payload is converted to one or many measurements by iot-agent (3-5), enriched in iot-core (6, 7) and finally serialized as SenML and published (8) on a rabbitMQ topic.
In the output we find sensorID = deviceID. The pack is divided into several records, the first record contains the type of measurement, bn, and a timestamp in unix time, bt.
{ "sensorID": "intern-a1b2bc3d4e5f6", "pack": [ { "bn": "urn:oma:lwm2m:ext:3303", "bt": 1675258662, "n": "0", "vs": "intern-a1b2bc3d4e5f6" }, { "n": "5700", "v": -5.8 }, { "u": "lat", "v": 0 }, { "u": "lon", "v": 0 }, { "n": "env", "vs": "air" }, { "n": "tenant", "vs": "default" } ], "timestamp": "2023-02-01T13:37:00.000000000Z" } The second record contains the measurement value, in this case it’s a SensorValue. The type urn:oma:lwm2m:ext:3303 is a temperature measurement.
{ "n": "5700", "v": -5.8 } This record shows that a sensor value ("n": "5700") of type float has the value -5.8. See the SenML specification for more information.
`,description:"How to add a known device",tags:["usage","configuration","how-to"],title:"Add a device",uri:"/getting-started/how-to/add-device/index.html"},{content:"",description:"",tags:null,title:"arch",uri:"/tags/arch/index.html"},{content:"",description:"",tags:null,title:"Categories",uri:"/categories/index.html"},{content:"",description:"",tags:null,title:"cip",uri:"/tags/cip/index.html"},{content:"",description:"",tags:null,title:"configuration",uri:"/tags/configuration/index.html"},{content:"",description:"",tags:null,title:"contact",uri:"/tags/contact/index.html"},{content:`Description This service is a distribution broker that federates information from multiple underlying NGSI-LD Context Brokers and across domains. It is responsible for implementing selected parts of the NGSI-LD API and limit the exposure of underlying services.
Architecture Diagrams C4Container System_Ext(producer, "Context Producer", "An agent that uses the NGSI-LD context provision\u003cbr\u003eand/or registration functionality to provide or announce the\u003cbr\u003eavailability of its context information to an NGSI-LD Context Broker") System_Ext(consumer, "Context Consumer", "An agent that uses the query and\u003cbr\u003esubscription functionality of NGSI-LD to\u003cbr\u003eretrieve context information") System_Ext(keycloak, "Keycloak", "Open ID Connect compliant\u003cbr\u003eidentity and access management") Container_Boundary(c1, "Context Broker") { Container(context-broker, "context-broker", $techn="Go", "You are here") Container_Ext(notifier, "notifier", $techn="Go", "A service that handles notifications") } Container_Boundary(c2, "Federated Brokers") { Container_Ext(brokerA, "Context Broker A", "An architectural component that implements all the NGSI-LD interfaces") Container_Ext(brokerB, "Context Broker B", "An architectural component that implements all the NGSI-LD interfaces") } Rel(producer, context-broker, "creates, updates or deletes\u003cbr\u003eentities in", "https, NGSI-LD") Rel(consumer, context-broker, "fetches entities\u003cbr\u003efrom", "https, NGSI-LD") Rel(context-broker, notifier, "sends notifi-\u003cbr\u003ecations via", "https") UpdateRelStyle(producer, context-broker, $offsetX="30", $offsetY="-150") UpdateRelStyle(consumer, context-broker, $offsetX="50", $offsetY="-150") UpdateRelStyle(context-broker, notifier, $offsetX="-30", $offsetY="-50") Rel(context-broker, keycloak, "validates auth tokens", "OIDC") UpdateRelStyle(context-broker, keycloak, $offsetX="-130", $offsetY="-50") Rel(context-broker, brokerA, "creates, retrieves, updates or\u003cbr\u003edeletes entities in", "https, NGSI-LD") Rel(context-broker, brokerB, "creates, retrieves, updates or\u003cbr\u003edeletes entities in", "https, NGSI-LD") UpdateRelStyle(context-broker, brokerA, $offsetX="-180", $offsetY="-40") UpdateRelStyle(context-broker, brokerB, $offsetX="-20", $offsetY="-40") Rel(notifier, consumer, "notifies registered consumers\u003cbr\u003eabout entity changes", "https, NGSI-LD") UpdateLayoutConfig($c4ShapeInRow="2", $c4BoundaryInRow="1") TODO: Add a diagram that explains the inner workings of the context broker.
Endpoints The context broker implements a subset of the NGSI-LD API. In this section we will document what specific endpoints have been implemented.
NGSI-LD In conformance with the specification, all NGSI-LD endpoints are presented under the root /ngsi-ld/v1. This context broker supports the following operations:
Operation Spec Method Endpoint Create Entity 6.4.3.1 POST /entities Retrieve Entity 6.5.3.1 GET /entities/{entityId} Merge Entity 6.5.3.4 PATCH /entities/{entityId} Update Entity Attributes 6.6.3.2 PATCH /entities/{entityId}/attrs/ Retrieve Temporal Evolution of an Entity 6.19.3.1 GET /temporal/entities/{entityId} Delete Entity 6.5.3.2 DELETE /entities/{entityId} Serve @context 6.30.3.1 GET /jsonldContexts/{contextId} Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/context-broker NGSI-LD API https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.06.01_60/gs_CIM009v010601p.pdf Run Since the service is distributed as a container image, it can easily be started using docker or podman with the following command:
docker run --rm ghcr.io/diwise/context-broker:prod-f84899004e8d3c0b72fa1c4a0803c187f72f90f8 To be able to do anything useful though it is dependent on one or more other brokers to federate. See the section on configuration below or checkout the compose file under https://github.com/diwise/diwise/tree/main/deployments/docker for more help on this.
Configuration Environment variables Name Type Default Description CONTEXT_BROKER_CLIENT_DEBUG boolean false More verbose output that can be used for debugging problems. Note that this does NOT control the logging level per se. SERVICE_PORT integer 8080 The port to accept incoming connections on Command line flags Flag Type Default Description config file path /opt/diwise/config/default.yaml Path to a configuration file containing federation information. policies file path /opt/diwise/config/authz.rego An authorization policy file. Configuration files There are two main configuration files that control the behaviour of the context broker. The first one is the federation configuration for the broker. While other brokers implement the subscription API from NGSI-LD, we have chosen a static configuration model that increase the security and supports the configuration as code methodology.
The other configuration file is the policy file that contains the authorization policy as code. The default policy uses secure defaults by only allowing GET requests. See more about this file under the next section.
Security Access to endpoints and individual access to tenants, endpoints and entity types can be configured using an Open Policy Agent policy written in rego. The default policy sets secure defaults by restricting access to only allow GET requests.
An example of how to customize the authorization can be found in the policy file used by default in our docker compose example. See https://github.com/diwise/diwise/blob/main/deployments/docker/configs/diwise/devmgmt-auth.rego.
Operations If N organizations deploy their own on premise installations of diwise, they will most likely end up with N (+1?) different configurations due to differences in their infrastructure, policies and regulations. Our services are however built to allow for a large amount of flexibility when it comes to integrating diwise in an organization.
Observability and Monitoring Since diwise is based on a microservice architecture it is of upmost importance that we provide easy access to indicators that can help monitoring tools and human beings infer the internal state of our platform.
Logging All logging is sent to stdout in json format so that it can be filtered and redirected to your logging aggregator of choice. In compose, we have chosen to use fluentbit to be able to aggregate the logging output using Loki.
Our logging framework of choice at the moment is zerolog, but we plan to make a breaking change when the structured logging package slog becomes available in the golang standard library. We really like zerolog, but believe that moving to a standard like slog is a better choice in the long run.
Metrics There are currently no application specific metrics emitted from the broker, but there will be. We promise.
Tracing To be able to connect the dots between different services we have decided to use the open telemetry sdk to create tracing spans with the appropriate tracing baggage. These spans can then be sent to a collector endpoint in the OTLP format and aggregated in a tool such as Tempo.
The following traces are created at the application level:
Span Attributes Created By Description post none notifier Spans the posting of a notification to a registered endpoint. create-entity ngsild-tenant ngsild Spans a create entity operation intitiated via the NGSI-LD api. query-entities ngsild-tenant ngsild Spans a query entities operation intitiated via the NGSI-LD api. retrieve-entity ngsild-tenant entity-id ngsild Spans a retrieve entity operation intitiated via the NGSI-LD api. merge-entity ngsild-tenant entity-id ngsild Spans a merge entity operation intitiated via the NGSI-LD api. update-entity-attributes ngsild-tenant entity-id ngsild Spans an update entity attributes operation intitiated via the NGSI-LD api. delete-entity ngsild-tenant entity-id ngsild Spans a delete entity operation intitiated via the NGSI-LD api. retrieve-temporal-entity ngsild-tenant entity-id ngsild Spans a “retrieve temporal evolution of entity” operation intitiated via the NGSI-LD api. The ngsild spans have corresponding subspans that are generated by the context broker client package.
Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["cip"],title:"Context Broker",uri:"/services/context-broker/index.html"},{content:`diwise is an open source project which means anyone can use it, and anyone can help out by reporting issues or contributing code. If you need help with how to submit an issue or pull request, you can click through to our issue templates on github and fill one out.
Submit a pull request Submit an issue `,description:"How to contribute code or report issues",tags:["usage","docs"],title:"Contribute",uri:"/getting-started/how-to/contribute/index.html"},{content:` If the things around you could talk, what would they say?
Introduction to Diwise diwise is an open source IoT communications platform that acts as a mediator between underlying sensor platforms and high level business systems. This means that the business tools and processes can be separated from the low level details of different communication interfaces and sensor types.
The idea behind this platform originated 2018 during the Good Tech Hack hackathon in Sundsvall, Sweden. A cross functional team from Masarin Consulting Group wanted to make the city of Sundsvall more accessible, by aggregating different sources of data and provide it to the citizens. The idea was pitched to Sweden’s innovation agency, Vinnova, who funded a project named IoT for accessibility to continue working on the idea in cooperation with Sundsvalls Kommun.
Long story short, after the project ended the name diwise was chosen, as a wordplay on digital wisdom, and the development now continues under the https://github.com/diwise organisation on GitHub.
What can i find here? On this site we will publish technical documentation about the platform and its components. The intention is to provide a more cohesive view of the platform from a technical perspective, than can typically be created when the information is scattered across 50-something different repositories.
For more high level non technical information we have a website (in swedish) at https://diwise.se.
Contact Go here for ways to get in touch with us.
`,description:"",tags:null,title:"Diwise",uri:"/index.html"},{content:"",description:"",tags:null,title:"docs",uri:"/tags/docs/index.html"},{content:`If you want to request features or report a bug or problem with diwise, please submit an issue via github.com.
If you want to contribute code to diwise, please submit a pull request via github.com.
If you have any sales related questions, contact niklas.morlin@masarinconsulting.se.
`,description:"",tags:["contact"],title:"Get in touch",uri:"/contact/index.html"},{content:` Set up development environmentHow to set up the development environment
Add a deviceHow to add a known device
ContributeHow to contribute code or report issues
`,description:"",tags:["usage","docs"],title:"How to",uri:"/getting-started/how-to/index.html"},{content:"",description:"",tags:null,title:"how-to",uri:"/tags/how-to/index.html"},{content:"",description:"",tags:null,title:"intro",uri:"/tags/intro/index.html"},{content:"",description:"",tags:null,title:"iot",uri:"/tags/iot/index.html"},{content:`Description The iot-agent service is responsible for connecting to an underlying platform via MQTT and ingest messages from the topics it subscribes to.
Architecture Diagrams C4Component Container_Boundary(b1, "iot-agent") { Container_Boundary(apib, "API") { Component(api, "API", "", "handles incoming messages") } Container_Boundary(msgp, "Message Processor") { Component(decoderreg, "Decoder Registry", "", "contains all available decoders") Component(decoder, "Decoder", "", "decodes incoming sensor specific\u003cbr\u003epayloads to internal format") Component(converterreg, "Converter Registry", "", "contains all available converters") Component(converter, "Converter", "", "converts internal format\u003cbr\u003eto LWM2M SenML") } Container_Boundary(evts, "Event Sender") { Component(sender, "Sender") } Component(mqtt-client, "MQTT Client") } UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="3") Endpoints Application This service exposes the following application endpoints:
Operation Method Endpoint Description Incoming Message POST /api/v0/messages Accepts incoming message payloads for further processing Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/iot-agent Run Since the service is distributed as a container image, it can be started using docker or podman. Do note that you must specify a couple of required environment variables though. See the configuration section below for more details.
This service has a runtime dependency on Keycloak for token management, iot-device-mgmt for device information and RabbitMQ for internal messaging. The latter can optionally be disabled for testing purposes.
Refer to the default docker compose configuration in https://github.com/diwise/diwise for details on how to start this service in concert with the rest of the platform.
Configuration Environment variables Name Type Default Description DEV_MGMT_URL url required URL to a service exposing the device management API. Typically an instance of iot-device-mgmt. MSG_FWD_ENDPOINT url required An endpoint that incoming messages should be forwarded to. Typically this is /api/v0/messages on the same service. OAUTH2_TOKEN_URL url required URL to an Open ID Connect token provider. OAUTH2_CLIENT_ID string required The client credentials id to use when requesting a token. OAUTH2_CLIENT_SECRET string required The client secret (password) to use when requesting a token. APPSERVER_FACADE string chirpstack Configures how to interpret incoming message payloads. MQTT_HOST hostname required Specify the MQTT host to connect to. MQTT_USER string The username (if any) used to authenticate with the MQTT server. MQTT_PASSWORD string The password (if any) used to authenticate with the MQTT server. MQTT_TOPIC_[x] string at least one required Any number of zero indexed MQTT topics that should be subscribed to on successful connect. SERVICE_PORT integer 8080 The port to accept incoming connections on Command line flags This service has no command line flags.
Configuration files This service has no configuration files.
Security Communication with device management requires a valid access token that will be requested via the OAuth2 token url specified in the configuration.
Operations Observability and Monitoring The documented metrics and tracing data below will be generated if the environment variable OTEL_EXPORTER_OTLP_ENDPOINT is set to a valid OTLP collector endpoint such as open telemetry collector.
Logging All logging is sent to stdout in a structured json format so that it can be filtered and redirected to your logging aggregator of choice. If tracing is enabled the log output will be decorated with the corresponding traceID for easier correlation.
Metrics Name Type Description mqtt.messages counter Total number of received mqtt messages Tracing The following traces are created at the application level:
Span Attributes Created By Description forward-message none messagehandler Spans the operation from the time the MQTT message handler recieves a message handler, until the forwarding endpoint returns a result. incoming-message none api Spans the operation of processing an incoming message payload. find-device-from-deveui none device mgmt client Spans a request to device management’s /api/v0/devices?devEUI=«id» endpoint. Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["iot"],title:"IoT Agent",uri:"/services/iot-agent/index.html"},{content:`Description The iot-core service is responsible for enriching and accepting incoming messages for further processing.
Architecture Diagrams C4Component Container_Boundary(b1, "iot-core") { Container_Boundary(infra, "infrastructure") { Component(listener, "Queue Listener", "", "listens for commands posted to\u003cbr\u003ethe iot-core queue") } Container_Boundary(app, "application") { Component(processor, "Message Processor", "", "processes received messages, enriches\u003cbr\u003eand accepts them for further processing") } } Container_Boundary(b3, "iot-device-mgmt") { Container_Ext(devmgmt, "Device Management", "", "manages information about\u003cbr\u003econnected devices") } Container_Boundary(b2, "messaging") { Container_Ext(rabbitmq, "Rabbit MQ", "", "distributes internal messages within\u003cbr\u003ethe IoT platform") } Rel(processor, devmgmt, "fetches device information from") UpdateRelStyle(processor, devmgmt, $offsetX="60", $offsetY="30") Rel(rabbitmq, listener, "delivers message.received event\u003cbr\u003equeue: iot-core") UpdateRelStyle(rabbitmq, listener, $offsetX="-190", $offsetY="-10") Rel(listener, processor, "forwards msgs\u003cbr\u003eto") UpdateRelStyle(listener, processor, $offsetX="-40", $offsetY="-30") Rel(processor, rabbitmq, "posts accepted message\u003cbr\u003etopic: message.accepted") UpdateRelStyle(processor, rabbitmq, $offsetX="80", $offsetY="-10") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="2") Endpoints Application This service does not expose any application endpoints
Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/iot-core Run Since the service is distributed as a container image, it can be started using docker or podman. Do note that you must specify a couple of required environment variables though. See the configuration section below for more details.
This service has a runtime dependency on Keycloak for token management, iot-device-mgmt for device information and RabbitMQ for internal messaging. The latter can optionally be disabled for testing purposes.
Refer to the default docker compose configuration in https://github.com/diwise/diwise for details on how to start this service in concert with the rest of the platform.
Configuration Environment variables Name Type Default Description DEV_MGMT_URL url required URL to a service exposing the device management API. Typically an instance of iot-device-mgmt. OAUTH2_TOKEN_URL url required URL to an Open ID Connect token provider. OAUTH2_CLIENT_ID string required The client credentials id to use when requesting a token. OAUTH2_CLIENT_SECRET string required The client secret (password) to use when requesting a token. SERVICE_PORT integer 8080 The port to accept incoming connections on Command line flags This service has no command line flags.
Configuration files This service has no configuration files.
Security Communication with device management requires a valid access token that will be requested via the OAuth2 token url specified in the configuration.
Operations Observability and Monitoring The documented metrics and tracing data below will be generated if the environment variable OTEL_EXPORTER_OTLP_ENDPOINT is set to a valid OTLP collector endpoint such as open telemetry collector.
Logging All logging is sent to stdout in a structured json format so that it can be filtered and redirected to your logging aggregator of choice. If tracing is enabled the log output will be decorated with the corresponding traceID for easier correlation.
Metrics There are currently no application specific metrics emitted from this service, but there will be. We promise.
Tracing The following traces are created at the application level:
Span Attributes Created By Description rcv-cmd none main Spans the handling of an incoming command on the iot-core queue. find-device-from-id none device mgmt client Spans a request to device management’s /api/v0/devices/{deviceId} endpoint. Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["iot"],title:"IoT Core",uri:"/services/iot-core/index.html"},{content:`Description The iot-device-mgmt-web service is responsible for providing a status view of the registered devices.
Architecture Diagrams C4Component Container_Ext(keycloak, "Keycloak", "", "") Person_Ext(user, "Administrator") Container_Boundary(b1, "iot-device-mgmt-web") { Component(app, "React App", "", "displays information about registered devices") } Container_Boundary(b3, "iot-device-mgmt") { Container_Ext(devmgmt, "Device Management", "", "manages information about\u003cbr\u003econnected devices") } Rel(app, keycloak, "fetches access\u003cbr\u003etoken from") UpdateRelStyle(app, keycloak, $offsetX="-120", $offsetY="-50") Rel(user, keycloak, "logs in via") UpdateRelStyle(user, keycloak, $offsetX="-20", $offsetY="-30") Rel(user, app, "uses") UpdateRelStyle(user, app, $offsetX="75", $offsetY="-50") BiRel(app, devmgmt, "fetches device status from \u003cbr\u003ehttps and server push") UpdateRelStyle(app, devmgmt, $offsetX="30", $offsetY="-30") UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1") Endpoints Application This service is a frontend client, and does not expose any application endpoints of its own.
Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/iot-device-mgmt-web Run Since the service is distributed as a container image, it can easily be started using docker or podman.
This service has a runtime dependency on Keycloak for token management and iot-device-mgmt for device information. Consult the source repository for information on how best to start this service for development purposes.
Refer to the default docker compose configuration in https://github.com/diwise/diwise for details on how to start this service in concert with the rest of the platform.
Configuration Environment variables This service does not use environment variables for configuration.
Command line flags This service has no command line flags.
Configuration files The behavior of the device management frontend is primarily configured by two files.
/config/keycloak.json should include a keycloak adapter configuration file. See the keycloak documentation for information about its contents.
{ "realm": "\u003crealm-name\u003e", "auth-server-url": "\u003curl to keycloak server\u003e", "ssl-required": "external", "resource": "\u003cname given to the frontend client in keycloak\u003e", "public-client": true } /config/env-config.js allows the injection of variables into the running frontend application. At the moment this only supports changing the customer logotype on the dashboard, but more customizations will be available as we move along.
window._env_ = { CUSTOMER_LOGO_URL: "https://some.customer.site/images/logo.svg", } Security Communication with device management requires a valid access token that will be requested via configured keycloak instance.
Operations Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["iot"],title:"IoT Device Dashboard",uri:"/services/iot-device-mgmt-web/index.html"},{content:`Description The iot-device-mgmt service is responsible for managing all the registered devices.
Architecture Diagrams C4Component Container_Ext(keycloak, "Keycloak", "") Container_Ext(devmgmt-web, "Device Management UI", "") Container_Ext(eventsubs, "Third Party Event Subscribers", "") Container_Boundary(b1, "iot-device-mgmt") { Container_Boundary(api, "API") { Component(api, "API", "", "handles incoming\u003cbr\u003erequests") } Container_Boundary(events, "Events") { Component(cloudevt, "Cloud Event Generator", "", "generates cloud events to\u003cbr\u003eregistered subscribers") Component(db, "In Memory Database", "", "contains all registered\u003cbr\u003edevices") } Container_Boundary(monitor, "Monitoring") { Component(watchdog, "Watchdog", "", "monitors liveliness of\u003cbr\u003eregistered devices") } } UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="3") Emitted Events TODO: Document what events are emitted from this service via SSE or as cloud events.
Endpoints Application This service exposes the following application endpoints:
Operation Method Endpoint Description Query Devices GET /api/v0/devices Returns a list of all the registered devices that the client has access to. Retrieve Device GET /api/v0/devices/{deviceId} Retrieve information about a specific device. Event Subscription GET /api/v0/events Subscribe to server sent events (SSE) about all device status changes. Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/iot-device-mgmt Run Since the service is distributed as a container image, it can be started using docker or podman. Do note that you must specify a couple of required environment variables though. See the configuration section below for more details.
This service has a runtime dependency on Keycloak for token management and RabbitMQ for internal messaging. The latter can optionally be disabled for testing purposes.
Refer to the default docker compose configuration in https://github.com/diwise/diwise for details on how to start this service in concert with the rest of the platform.
Configuration Environment variables Name Type Default Description OAUTH2_TOKEN_URL url required URL to an Open ID Connect token provider. OAUTH2_CLIENT_ID string required The client credentials id to use when requesting a token. OAUTH2_CLIENT_SECRET string required The client secret (password) to use when requesting a token. SERVICE_PORT integer 8080 The port to accept incoming connections on Command line flags Flag Type Default Description devices directory path /opt/diwise/config/data Path to a configuration directory containing device information. policies file path /opt/diwise/config/authz.rego An authorization policy file. notifications file path /opt/diwise/config/notifications.yaml Path to a configuration file containing information about notification endpoints. Configuration files TODO: Document the configuration files …
Security Access to the published endpoints is controlled with the help of an Open Policy Agent rego policy that should be mounted as part of the deployment. The granularity and level of this security is up to the administrator of this service.
Operations Observability and Monitoring The documented metrics and tracing data below will be generated if the environment variable OTEL_EXPORTER_OTLP_ENDPOINT is set to a valid OTLP collector endpoint such as open telemetry collector.
Logging All logging is sent to stdout in a structured json format so that it can be filtered and redirected to your logging aggregator of choice. If tracing is enabled the log output will be decorated with the corresponding traceID for easier correlation.
Metrics This service does not, yet, expose any application level metrics.
Tracing The following traces are created at the application level:
Span Attributes Created By Description query-devices none api Spans the operation of retreiving the device list and returning it to a caller. retrieve-device none api Spans the operation of retrieving information about a device and returning it to the caller. check-auth none auth Spans the operation of checking authorization status based on token contents. Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["iot"],title:"IoT Device Management",uri:"/services/iot-device-mgmt/index.html"},{content:`Description The iot-transform-fiware service is responsible for transforming incoming sensor data to corresponding fiware entities, if any.
Architecture Diagrams C4Component Component_Ext(rabbitmq, "RabbitMQ", "", " ") Component_Ext(broker, "Context Broker", "", " ") Container_Boundary(b1, "iot-transform-fiware") { Container_Boundary(msgp, "Application") { Component(mp, "Message Processor", "", "processes incoming\u003cbr\u003emessages") Component(transreg, "Registry", "", "contains all available\u003cbr\u003etransformers") Component(transformer, "Transformer", "", "transforms a given payload\u003cbr\u003eto a specific entity type") } Container_Boundary(bc, "Context Broker Client") { Component(client, "Client", "", "abstracts the broker's\u003cbr\u003eNGSI-LD API") } } Rel(rabbitmq, mp, "delivers messages to", "topic: message.accepted") UpdateRelStyle(rabbitmq, mp, $offsetX="0", $offsetY="-90") Rel(mp, transreg, "finds\u003cbr\u003etransformer\u003cbr\u003ein") UpdateRelStyle(mp, transreg, $offsetX="-25", $offsetY="-30") Rel(mp, transformer, "forwards message\u003cbr\u003eto") UpdateRelStyle(mp, transformer, $offsetX="10", $offsetY="0") Rel(transformer, client, "uses") Rel(client, broker, "creates or updates entities in broker", "https, NGSI-LD") UpdateRelStyle(client, broker, $offsetX="-30", $offsetY="-90") UpdateLayoutConfig($c4ShapeInRow="2", $c4BoundaryInRow="3") Endpoints Application This service does not expose any application endpoints.
Probes A health endpoint, that can be used by kubernetes probes for instance, is exposed on the default port under /health. A future release will move this endpoint to a separate control and monitoring port.
Links Where Address Git Hub https://github.com/diwise/iot-transform-fiware Run Since the service is distributed as a container image, it can be started using docker or podman. It has a runtime dependency on a running context broker to be able to create or update entities. The url to this broker is specified via an environment variabel. See configuration below.
Refer to the default docker compose configuration in https://github.com/diwise/diwise for details on how to start this service in concert with the rest of the platform.
Configuration Environment variables Name Type Default Description NGSI_CB_URL url required URL to a service exposing the NGSI-LD API. Typically an instance of context-broker. SERVICE_PORT integer 8080 The port to accept incoming connections on Command line flags This service has no command line flags.
Configuration files This service has no configuration files.
Operations Observability and Monitoring The documented metrics and tracing data below will be generated if the environment variable OTEL_EXPORTER_OTLP_ENDPOINT is set to a valid OTLP collector endpoint such as open telemetry collector.
Logging All logging is sent to stdout in a structured json format so that it can be filtered and redirected to your logging aggregator of choice. If tracing is enabled the log output will be decorated with the corresponding traceID for easier correlation.
Metrics This service does not emit any application level metrics, yet.
Tracing The following traces are created at the application level:
Span Attributes Created By Description «queue name» receive none messaging Span containing the handling of an incoming message from the message.accepted topic. create-entity ngsild-tenant context broker client Spans a create entity operation intitiated via the context broker client. merge-entity ngsild-tenant entity-id context broker client Spans a merge entity operation intitiated via the context broker client. update-entity-attributes ngsild-tenant entity-id context broker client Spans an update entity attributes operation intitiated via the context broker client. Run Book In this section we will list different failure modes for the service, how to detect them based on observability data and how to recover from them.
FAQ This section is supposed to list questions that get asked frequently by integrators and developers.
License This document is licensed CC-BY
`,description:"",tags:["iot"],title:"IoT Transform Fiware",uri:"/services/iot-transform-fiware/index.html"},{content:"",description:"",tags:null,title:"sensors",uri:"/tags/sensors/index.html"},{content:`If you have created a bug fix or built a feature that you want to be incorporated into diwise, please submit a pull request using the template available on github.com.
`,description:"",tags:["usage","docs"],title:"Submit a pull request",uri:"/getting-started/how-to/submit-pr/index.html"},{content:`If you find a bug or problem with diwise, kindly make a bug report. If you want to request a feature you can also do so using a template. Use the pre-existing template for either a bug report or a feature request - and make sure to include all the relevant information - on github.
`,description:"",tags:["usage,docs"],title:"Submit an issue",uri:"/getting-started/how-to/submit-issues/index.html"},{content:"",description:"",tags:null,title:"Tags",uri:"/tags/index.html"},{content:"",description:"",tags:null,title:"usage",uri:"/tags/usage/index.html"},{content:"",description:"",tags:null,title:"usage,docs",uri:"/tags/usagedocs/index.html"}]