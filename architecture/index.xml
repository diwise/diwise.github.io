<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Diwise for Developers</title><link>https://diwise.github.io/architecture/index.html</link><description>Recent content in Architecture on Diwise for Developers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://diwise.github.io/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://diwise.github.io/architecture/overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/architecture/overview/index.html</guid><description>System Context Diagram C4Context Boundary(boutputs, &amp;#34;egresses&amp;#34;, &amp;#34;Integrations&amp;#34;) { System_Ext(subs, &amp;#34;Subscribers&amp;#34;) } Boundary(b0, &amp;#34;diwise&amp;#34;, &amp;#34;Software System&amp;#34;) { System(iot-p, &amp;#34;IoT Platform&amp;#34;, &amp;#34;Manages devices and aggregates&amp;lt;br&amp;gt;information from different platforms.&amp;#34;) System(cip-p, &amp;#34;City Information Platform&amp;#34;, &amp;#34;Stores and provides current and&amp;lt;br&amp;gt;historical city information.&amp;#34;) } Boundary(binputs, &amp;#34;ingresses&amp;#34;, &amp;#34;Integrations&amp;#34;) { SystemQueue_Ext(mqtt, &amp;#34;MQTT&amp;#34;) System(integration, &amp;#34;Integration&amp;#34;, &amp;#34;Fetches data from external services&amp;lt;br&amp;gt;and stores them in CiP&amp;#34;) } Boundary(bonline, &amp;#34;Third Party Services&amp;#34;, &amp;#34;&amp;#34;) { System_Ext(ext-iot-p, &amp;#34;External IoT Platform&amp;#34;) System_Ext(exts, &amp;#34;External Services&amp;#34;) } Rel(iot-p, mqtt, &amp;#34;pub/sub&amp;#34;, &amp;#34;amqp&amp;#34;) Rel(cip-p, subs, &amp;#34;Notifies&amp;#34;, &amp;#34;https, NGSI-LD Notification&amp;#34;) Rel(iot-p, cip-p, &amp;#34;Updates&amp;#34;, &amp;#34;https, NGSI-LD&amp;#34;) Rel(iot-p, subs, &amp;#34;Notifies&amp;#34;, &amp;#34;https, Cloud Event&amp;#34;) Rel(ext-iot-p, mqtt, &amp;#34;pub/sub&amp;#34;, &amp;#34;amqp&amp;#34;) Rel(integration, exts, &amp;#34;Fetches telemetry and data&amp;#34;) Rel(integration, cip-p, &amp;#34;Updates&amp;#34;, &amp;#34;NGSI-LD&amp;#34;) UpdateRelStyle(iot-p, mqtt, $offsetX=&amp;#34;-60&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;) UpdateRelStyle(cip-p, subs, $offsetX=&amp;#34;30&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) UpdateRelStyle(iot-p, cip-p, $offsetX=&amp;#34;-40&amp;#34;, $offsetY=&amp;#34;30&amp;#34;) UpdateRelStyle(iot-p, subs, $offsetX=&amp;#34;-120&amp;#34;, $offsetY=&amp;#34;-50&amp;#34;) UpdateRelStyle(integration, cip-p, $offsetX=&amp;#34;25&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;) UpdateRelStyle(integration, exts, $offsetX=&amp;#34;50&amp;#34;, $offsetY=&amp;#34;5&amp;#34;) UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;1&amp;#34;)</description></item><item><title>IoT Platform</title><link>https://diwise.github.io/architecture/iot/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/architecture/iot/index.html</guid><description>Container Diagram C4Container Person(admin, &amp;#34;Administrator&amp;#34;) System_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;Open ID Connect compliant identity and access management&amp;#34;) SystemQueue_Ext(mqtt, &amp;#34;MQTT&amp;#34;, &amp;#34;Message bus to interact with underlying IoT platform&amp;#34;) Container(dev-mgmt-web, &amp;#34;Device Management UI&amp;#34;, $techn=&amp;#34;JavaScript, React&amp;#34;, &amp;#34;Presents devicemanagement capabilities to users.&amp;#34;) System_Ext(cip-p, &amp;#34;City Information Platform&amp;#34;, &amp;#34;Stores and provides current and&amp;lt;br&amp;gt;historical city information&amp;#34;) Container_Boundary(c1, &amp;#34;IoT Platform&amp;#34;) { Container(iot-dev-mgmt, &amp;#34;iot-device-mgmt&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;Backend service for device management&amp;#34;) Container(iot-agent, &amp;#34;iot-agent&amp;#34;, $techn=&amp;#34;Go&amp;#34;, &amp;#34;Decodes and translates incoming messages&amp;#34;) Container(iot-tr-fw, &amp;#34;iot-transform-fiware&amp;#34;, $tech=&amp;#34;Go&amp;#34;, &amp;#34;Transforms accepted messages into&amp;lt;br&amp;gt;corresponding datamodels known&amp;lt;br&amp;gt;to the City Information Platform&amp;#34;) Container(iot-events, &amp;#34;iot-events&amp;#34;, $tech=&amp;#34;Go&amp;#34;, &amp;#34;Publishing events to UI, cloudevents and more&amp;#34;) Container(iot-core, &amp;#34;iot-core&amp;#34;, $tech=&amp;#34;Go&amp;#34;, &amp;#34;Decorates received messages and accepts&amp;lt;br&amp;gt;them for further processing&amp;#34;) ContainerDb_Ext(pgsql, &amp;#34;PostgreSQL Database&amp;#34;, &amp;#34;SQL Database&amp;#34;, &amp;#34;To be used for storing information&amp;lt;br&amp;gt;about device types and tenants.</description></item><item><title>City Information Platform</title><link>https://diwise.github.io/architecture/cip/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://diwise.github.io/architecture/cip/index.html</guid><description>Container Diagram C4Container System_Ext(dataportal, &amp;#34;dataportal.se&amp;#34;, &amp;#34;Harvests meta data about open API:s&amp;#34;) System_Ext(iot-p, &amp;#34;IoT Platform&amp;#34;, &amp;#34;Stores and provides current and&amp;lt;br&amp;gt;historical city information&amp;#34;) System_Ext(keycloak, &amp;#34;Keycloak&amp;#34;, &amp;#34;Open ID Connect compliant&amp;lt;br&amp;gt;identity and access management&amp;#34;) System(opendata, &amp;#34;Open Data&amp;#34;, &amp;#34;Provides open data via REST API:s&amp;#34;) System(batch, &amp;#34;Batch Job&amp;#34;, &amp;#34;Extracts data periodically&amp;#34;) System(integrations, &amp;#34;Integrations&amp;#34;, &amp;#34;Fetches data from external services and&amp;lt;br&amp;gt;integrates it into the CIP&amp;#34;) Container_Boundary(c1, &amp;#34;City Information Platform&amp;#34;) { Container_Ext(orion-ld, &amp;#34;Orion-LD&amp;#34;, $techn=&amp;#34;C&amp;#43;&amp;#43;&amp;#34;, &amp;#34;Orion-LD is a Context Broker and CEF&amp;lt;br&amp;gt;building block for context data management&amp;lt;br&amp;gt;which supports both the&amp;lt;br&amp;gt;NGSI-LD and the NGSI-v2 APIs.</description></item></channel></rss>